(in-package :mulm-test)

(defparameter *features1*
  `((:bigram ,(mulm::make-ngram-feature-extractor))
    (:word ,(mulm::make-word-feature-extractor))))

(defparameter *sentence1*
  '(("How" "WRB") ("are" "VBP") ("you" "PP") ("?" "?")))

(define-test test-make-word-extractor
  (let ((extractor (mulm::make-word-feature-extractor)))
    (assert-equal :|How| (funcall extractor *sentence1* 0))
    (assert-equal :|are| (funcall extractor *sentence1* 1))
    (assert-equal :|you| (funcall extractor *sentence1* 2))
    (assert-equal :|?| (funcall extractor *sentence1* 3))
    (assert-true (null (funcall extractor *sentence1* -1)))
    (assert-true (null (funcall extractor *sentence1* 4))))
  (let ((extractor (mulm::make-word-feature-extractor :offset -1)))
    (assert-equal :|How| (funcall extractor *sentence1* 1))
    (assert-equal :|are| (funcall extractor *sentence1* 2))
    (assert-equal :|you| (funcall extractor *sentence1* 3))
    (assert-equal :|?| (funcall extractor *sentence1* 4))
    (assert-true (null (funcall extractor *sentence1* 0)))
    (assert-true (null (funcall extractor *sentence1* 5))))
  (let ((extractor (mulm::make-word-feature-extractor :offset 1)))
    (assert-equal :|How| (funcall extractor *sentence1* -1))
    (assert-equal :|are| (funcall extractor *sentence1* 0))
    (assert-equal :|you| (funcall extractor *sentence1* 1))
    (assert-equal :|?| (funcall extractor *sentence1* 2))
    (assert-true (null (funcall extractor *sentence1* -2)))
    (assert-true (null (funcall extractor *sentence1* 3)))))

(define-test test-make-ngram-extractor
  (let ((extractor (mulm::make-ngram-feature-extractor :n 1)))
    (assert-equal '(:|WRB|) (funcall extractor *sentence1* 0))
    (assert-equal '(:|VBP|) (funcall extractor *sentence1* 1))
    (assert-equal '(:|PP|) (funcall extractor *sentence1* 2))
    (assert-equal '(:|?|) (funcall extractor *sentence1* 3))
    (assert-true (null (funcall extractor *sentence1* -1)))
    (assert-true (null (funcall extractor *sentence1* 4))))
  (let ((extractor (mulm::make-ngram-feature-extractor)))
    (assert-equal '(:|<s>| :|WRB|) (funcall extractor *sentence1* 0))
    (assert-equal '(:|WRB| :|VBP|) (funcall extractor *sentence1* 1))
    (assert-equal '(:|VBP| :|PP|) (funcall extractor *sentence1* 2))
    (assert-equal '(:|PP| :|?|) (funcall extractor *sentence1* 3))
    (assert-true (null (funcall extractor *sentence1* -1)))
    (assert-true (null (funcall extractor *sentence1* 4))))
  (let ((extractor (mulm::make-ngram-feature-extractor :n 3)))
    (assert-equal '(:|<s>| :|<s>| :|WRB|) (funcall extractor *sentence1* 0))
    (assert-equal '(:|<s>| :|WRB| :|VBP|) (funcall extractor *sentence1* 1))
    (assert-equal '(:|WRB| :|VBP| :|PP|) (funcall extractor *sentence1* 2))
    (assert-equal '(:|VBP| :|PP| :|?|) (funcall extractor *sentence1* 3))
    (assert-true (null (funcall extractor *sentence1* -1)))
    (assert-true (null (funcall extractor *sentence1* 4)))))

(define-test test-add-feature-count
  (let ((counts (make-hash-table)))
    (mulm::add-feature-count :id "val" counts)
    (assert-true (= 1 (mulm::get-feature-count :id "val" counts)))
    (mulm::add-feature-count :id "val" counts)
    (assert-true (= 2 (mulm::get-feature-count :id "val" counts)))
    (assert-true (null (mulm::get-feature-count :other-id "val" counts)))
    (assert-true (null (mulm::get-feature-count :id "other-val" counts)))))

(define-test test-count-features
  (let ((counts (make-hash-table)))
    (assert-equal 'hash-table (type-of (mulm::count-features *sentence1* *features1* counts)))
    (assert-true (= 1 (mulm::get-feature-count :word :|How| counts)))
    (assert-true (= 1 (mulm::get-feature-count :word :|are| counts)))
    (assert-true (= 1 (mulm::get-feature-count :word :|you| counts)))
    (assert-true (= 1 (mulm::get-feature-count :word :|?| counts)))
    (assert-true (= 1 (mulm::get-feature-count :bigram '(:|<s>| :|WRB|) counts)))
    (assert-true (= 1 (mulm::get-feature-count :bigram '(:|WRB| :|VBP|) counts)))
    (assert-true (= 1 (mulm::get-feature-count :bigram '(:|VBP| :|PP|) counts)))
    (assert-true (= 1 (mulm::get-feature-count :bigram '(:|PP| :|?|) counts)))))
